<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sognare&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-10T04:36:12.036Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Sognare</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TensorRT学习记录(一)：简介与工作流程</title>
    <link href="http://example.com/2022/04/10/TensorRT%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%80-%EF%BC%9A%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2022/04/10/TensorRT%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%80-%EF%BC%9A%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</id>
    <published>2022-04-10T04:34:28.000Z</published>
    <updated>2022-04-10T04:36:12.036Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下学习TensorRT的过程，基本上是提炼翻译了一下手册。</p><h1 id="一、TensorRT-简介"><a href="#一、TensorRT-简介" class="headerlink" title="一、TensorRT 简介"></a>一、TensorRT 简介</h1><p>TensorRT是NVIDIA推出的一款高性能<strong>推理</strong>引擎，可与TensorFlow、Caffe等前端神经网络开发框架组合，加速网络在NVIDIA GPU上的推理速度。</p><h1 id="二、TensorRT-基本工作流程"><a href="#二、TensorRT-基本工作流程" class="headerlink" title="二、TensorRT 基本工作流程"></a>二、TensorRT 基本工作流程</h1><p>TensorRT的运行分为两个阶段：Build、Runtime。</p><h2 id="1、Build"><a href="#1、Build" class="headerlink" title="1、Build"></a>1、Build</h2><p>TensorRT针对目标GPU对网络模型做相应的优化处理，该阶段主要接口为 <em>Builder</em>，由 <em>Builder</em> 执行优化并生成 <em>Engine</em>。</p><p>生成<em>Engine</em>的步骤如下：</p><h3 id="1-创建网络定义"><a href="#1-创建网络定义" class="headerlink" title="(1)创建网络定义"></a>(1)创建网络定义</h3><p>由<em>NetworkDefinition</em> 负责，最常用的方式是在传入 TensorRT 前，先将前端网络模型转换为 ONNX 格式，然后使用 TensorRT 的 ONNX parser 将其传入。</p><h3 id="2-配置Builder"><a href="#2-配置Builder" class="headerlink" title="(2)配置Builder"></a>(2)配置<em>Builder</em></h3><p>由 <em>BuilderConfig</em> 负责，定义 <em>Builder</em> 如何优化网络模型。</p><h3 id="3-调用Builder生成Engine"><a href="#3-调用Builder生成Engine" class="headerlink" title="(3)调用Builder生成Engine"></a>(3)调用Builder生成<em>Engine</em></h3><p>完成网络定义与 <em>Builder</em> 配置后,即可调用 <em>Builder</em> 生成 <em>Engine</em>，<em>Builder</em>以序列化的方式创建 <em>Engine</em>（序列化后为Plan）， Plan可反序列化或保存至磁盘供后续使用。</p><p>P.S 序列化是将对象转换为可保持或可传输的格式的过程，与之相对的是反序列化。其将流还原为对象。</p><h2 id="2、Runtime"><a href="#2、Runtime" class="headerlink" title="2、Runtime"></a>2、Runtime</h2><p>该阶段执行优化后的神经网络模型，主要接口为<em>Runtime</em>，步骤如下：</p><h3 id="1-反序列化-Plan，创建-Engine"><a href="#1-反序列化-Plan，创建-Engine" class="headerlink" title="(1)反序列化 Plan，创建 Engine"></a>(1)反序列化 Plan，创建 <em>Engine</em></h3><p><em>Engine</em> 即为优化后的网络模型。</p><h3 id="2-创建ExecutionContext"><a href="#2-创建ExecutionContext" class="headerlink" title="(2)创建ExecutionContext"></a>(2)创建ExecutionContext</h3><p><em>ExecutionContext</em> 由 <em>Engine</em> 创建，是调用推理的主要接口。</p><h3 id="3-设置输入-输出-buffer"><a href="#3-设置输入-输出-buffer" class="headerlink" title="(3)设置输入/输出 buffer"></a>(3)设置输入/输出 buffer</h3><p>调用推理前必须设置输入输出buffer。</p><h3 id="4-执行推理"><a href="#4-执行推理" class="headerlink" title="(4)执行推理"></a>(4)执行推理</h3><p>以上准备就绪后，执行推理。</p><h1 id="三、SampleOnnxMNIST代码走读"><a href="#三、SampleOnnxMNIST代码走读" class="headerlink" title="三、SampleOnnxMNIST代码走读"></a>三、SampleOnnxMNIST代码走读</h1><p>这部分代码为官方实例代码，实现了加速 ONNX 格式的MNIST网络模型。</p><p>SampleOnnxMNIST类实现了网络模型的读取、优化及运行，接口如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class SampleOnnxMNIST</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    SampleOnnxMNIST(const samplesCommon::OnnxSampleParams&amp; params)</span><br><span class="line">        : mParams(params)</span><br><span class="line">        , mEngine(nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Function builds the network engine</span><br><span class="line">    //!</span><br><span class="line">    bool build();</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Runs the TensorRT inference engine for this sample</span><br><span class="line">    //!</span><br><span class="line">    bool infer();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    samplesCommon::OnnxSampleParams mParams; //!&lt; The parameters for the sample.</span><br><span class="line"></span><br><span class="line">    nvinfer1::Dims mInputDims;  //!&lt; The dimensions of the input to the network.</span><br><span class="line">    nvinfer1::Dims mOutputDims; //!&lt; The dimensions of the output to the network.</span><br><span class="line">    int mNumber&#123;0&#125;;             //!&lt; The number to classify</span><br><span class="line"></span><br><span class="line">    std::shared_ptr&lt;nvinfer1::ICudaEngine&gt; mEngine; //!&lt; The TensorRT engine used to run the network</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Parses an ONNX model for MNIST and creates a TensorRT network</span><br><span class="line">    //!</span><br><span class="line">    bool constructNetwork(SampleUniquePtr&lt;nvinfer1::IBuilder&gt;&amp; builder,</span><br><span class="line">        SampleUniquePtr&lt;nvinfer1::INetworkDefinition&gt;&amp; network, SampleUniquePtr&lt;nvinfer1::IBuilderConfig&gt;&amp; config,</span><br><span class="line">        SampleUniquePtr&lt;nvonnxparser::IParser&gt;&amp; parser);</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Reads the input  and stores the result in a managed buffer</span><br><span class="line">    //!</span><br><span class="line">    bool processInput(const samplesCommon::BufferManager&amp; buffers);</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Classifies digits and verify result</span><br><span class="line">    //!</span><br><span class="line">    bool verifyOutput(const samplesCommon::BufferManager&amp; buffers);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1、OnnxSampleParams"><a href="#1、OnnxSampleParams" class="headerlink" title="1、OnnxSampleParams"></a>1、OnnxSampleParams</h2><p>OnnxSampleParams为一个结构体继承了SampleParams，保存了输入、输出、<em>builder</em>的优化配置等信息，结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct SampleParams</span><br><span class="line">&#123;</span><br><span class="line">    int32_t batchSize&#123;1&#125;;              //!&lt; Number of inputs in a batch</span><br><span class="line">    int32_t dlaCore&#123;-1&#125;;               //!&lt; Specify the DLA core to run network on.</span><br><span class="line">    bool int8&#123;false&#125;;                  //!&lt; Allow runnning the network in Int8 mode.</span><br><span class="line">    bool fp16&#123;false&#125;;                  //!&lt; Allow running the network in FP16 mode.</span><br><span class="line">    std::vector&lt;std::string&gt; dataDirs; //!&lt; Directory paths where sample data files are stored</span><br><span class="line">    std::vector&lt;std::string&gt; inputTensorNames;</span><br><span class="line">    std::vector&lt;std::string&gt; outputTensorNames;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct OnnxSampleParams : public SampleParams</span><br><span class="line">&#123;</span><br><span class="line">    std::string onnxFileName; //!&lt; Filename of ONNX file of a network</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2、build"><a href="#2、build" class="headerlink" title="2、build()"></a>2、build()</h2><h3 id="1-创建builder"><a href="#1-创建builder" class="headerlink" title="(1)创建builder"></a>(1)创建<em>builder</em></h3><p>创建 <em>builder</em> 的代码如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto builder = SampleUniquePtr&lt;nvinfer1::IBuilder&gt;(nvinfer1::createInferBuilder(sample::gLogger.getTRTLogger()));</span><br><span class="line">    if (!builder)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>SampleUniquePtr为TensorRT包装的unique类型智能指针，其定义如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">using SampleUniquePtr = std::unique_ptr&lt;T, InferDeleter&gt;;</span><br></pre></td></tr></table></figure><p>createInferBuilder函数，返回IBuilder类型指针：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inline IBuilder* createInferBuilder(ILogger&amp; logger) noexcept</span><br><span class="line">&#123;</span><br><span class="line">    return static_cast&lt;IBuilder*&gt;(createInferBuilder_INTERNAL(&amp;logger, NV_TENSORRT_VERSION));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数的输入参数ILogger为日志接口，用于记录运行时的相关信息(?)，这部分以后再看看吧</p><h3 id="2-创建网络定义"><a href="#2-创建网络定义" class="headerlink" title="(2)创建网络定义"></a>(2)创建网络定义</h3><p>通过<em>Builder</em>的createNetworkV2函数返回网络定义对象，该函数的输入参数定义了网络对象的一些属性，explicitBatch表示该网络为显式固定batch，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const auto explicitBatch = 1U &lt;&lt; static_cast&lt;uint32_t&gt;(NetworkDefinitionCreationFlag::kEXPLICIT_BATCH);</span><br><span class="line">auto network = SampleUniquePtr&lt;nvinfer1::INetworkDefinition&gt;(builder-&gt;createNetworkV2(explicitBatch));</span><br><span class="line">if (!network)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建Builder配置"><a href="#3-创建Builder配置" class="headerlink" title="(3)创建Builder配置"></a>(3)创建<em>Builder</em>配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto config = SampleUniquePtr&lt;nvinfer1::IBuilderConfig&gt;(builder-&gt;createBuilderConfig());</span><br><span class="line">if (!config)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建-ONNX-Parser"><a href="#4-创建-ONNX-Parser" class="headerlink" title="(4)创建 ONNX Parser"></a>(4)创建 ONNX Parser</h3><p>由于模型为 ONNX 格式，因此需要用 TensorRT 的ONNX Parser来解析并将其读入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auto parser</span><br><span class="line">    = SampleUniquePtr&lt;nvonnxparser::IParser&gt;(nvonnxparser::createParser(*network, sample::gLogger.getTRTLogger()));</span><br><span class="line">if (!parser)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中函数createParser将返回一个parser对象，解析的结果将写入之前定义的network中。</p><h3 id="5-构建网络"><a href="#5-构建网络" class="headerlink" title="(5)构建网络"></a>(5)构建网络</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto constructed = constructNetwork(builder, network, config, parser);</span><br><span class="line">if (!constructed)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用constructNetwork函数完成网络的构建，在函数内调用之前创建的ONNX解析器对解析ONNX文件，并完成对<em>builder</em>的配置，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bool SampleOnnxMNIST::constructNetwork(SampleUniquePtr&lt;nvinfer1::IBuilder&gt;&amp; builder,</span><br><span class="line">    SampleUniquePtr&lt;nvinfer1::INetworkDefinition&gt;&amp; network, SampleUniquePtr&lt;nvinfer1::IBuilderConfig&gt;&amp; config,</span><br><span class="line">    SampleUniquePtr&lt;nvonnxparser::IParser&gt;&amp; parser)</span><br><span class="line">&#123;</span><br><span class="line">    // 解析 ONNX 文件，获得网络模型</span><br><span class="line">    auto parsed = parser-&gt;parseFromFile(locateFile(mParams.onnxFileName, mParams.dataDirs).c_str(),</span><br><span class="line">        static_cast&lt;int&gt;(sample::gLogger.getReportableSeverity()));</span><br><span class="line">    if (!parsed)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 设置TensorRT 工作空间大小，越大可采用的优化算法越多</span><br><span class="line">    // 示例中设为16MB</span><br><span class="line">    config-&gt;setMaxWorkspaceSize(16_MiB);</span><br><span class="line">    // 配置参数是否为FP16，INT8类型</span><br><span class="line">    if (mParams.fp16)</span><br><span class="line">    &#123;</span><br><span class="line">        config-&gt;setFlag(BuilderFlag::kFP16);</span><br><span class="line">    &#125;</span><br><span class="line">    if (mParams.int8)</span><br><span class="line">    &#123;</span><br><span class="line">        config-&gt;setFlag(BuilderFlag::kINT8);</span><br><span class="line">        samplesCommon::setAllDynamicRanges(network.get(), 127.0f, 127.0f);</span><br><span class="line">    &#125;</span><br><span class="line">    // 目标硬件是否DLA</span><br><span class="line">    samplesCommon::enableDLA(builder.get(), config.get(), mParams.dlaCore);</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>P.S. DLA(Deep Learning Accelerator)是NVIDIA开源的深度学习加速器。</p><h3 id="6-配置-CUDA-流"><a href="#6-配置-CUDA-流" class="headerlink" title="(6)配置 CUDA 流"></a>(6)配置 CUDA 流</h3><p>为config配置用于执行该网络的CUDA流：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auto profileStream = samplesCommon::makeCudaStream();</span><br><span class="line">if (!profileStream)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">config-&gt;setProfileStream(*profileStream);</span><br></pre></td></tr></table></figure><h3 id="7-生成-Engine"><a href="#7-生成-Engine" class="headerlink" title="(7)生成 Engine"></a>(7)生成 <em>Engine</em></h3><ol><li>根据网络定义与builder配置编译优化网络，并将其序列化得到plan</li><li>创建runtime准备反序列化</li><li>反序列化plan获得Engine<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 根据之前的网络定义与builder配置编译优化并序列化网络</span><br><span class="line">SampleUniquePtr&lt;IHostMemory&gt; plan&#123;builder-&gt;buildSerializedNetwork(*network, *config)&#125;;</span><br><span class="line">if (!plan)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">// 创建runtime准备反序列化</span><br><span class="line">SampleUniquePtr&lt;IRuntime&gt; runtime&#123;createInferRuntime(sample::gLogger.getTRTLogger())&#125;;</span><br><span class="line">if (!runtime)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">// 反序列化plan获得Engine</span><br><span class="line">mEngine = std::shared_ptr&lt;nvinfer1::ICudaEngine&gt;(</span><br><span class="line">    runtime-&gt;deserializeCudaEngine(plan-&gt;data(), plan-&gt;size()), samplesCommon::InferDeleter());</span><br><span class="line">if (!mEngine)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">bool SampleOnnxMNIST::build()</span><br><span class="line">&#123;</span><br><span class="line">    auto builder = SampleUniquePtr&lt;nvinfer1::IBuilder&gt;(nvinfer1::createInferBuilder(sample::gLogger.getTRTLogger()));</span><br><span class="line">    if (!builder)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const auto explicitBatch = 1U &lt;&lt; static_cast&lt;uint32_t&gt;(NetworkDefinitionCreationFlag::kEXPLICIT_BATCH);</span><br><span class="line">    auto network = SampleUniquePtr&lt;nvinfer1::INetworkDefinition&gt;(builder-&gt;createNetworkV2(explicitBatch));</span><br><span class="line">    if (!network)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto config = SampleUniquePtr&lt;nvinfer1::IBuilderConfig&gt;(builder-&gt;createBuilderConfig());</span><br><span class="line">    if (!config)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto parser</span><br><span class="line">        = SampleUniquePtr&lt;nvonnxparser::IParser&gt;(nvonnxparser::createParser(*network, sample::gLogger.getTRTLogger()));</span><br><span class="line">    if (!parser)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto constructed = constructNetwork(builder, network, config, parser);</span><br><span class="line">    if (!constructed)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto profileStream = samplesCommon::makeCudaStream();</span><br><span class="line">    if (!profileStream)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    config-&gt;setProfileStream(*profileStream);</span><br><span class="line"></span><br><span class="line">    SampleUniquePtr&lt;IHostMemory&gt; plan&#123;builder-&gt;buildSerializedNetwork(*network, *config)&#125;;</span><br><span class="line">    if (!plan)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SampleUniquePtr&lt;IRuntime&gt; runtime&#123;createInferRuntime(sample::gLogger.getTRTLogger())&#125;;</span><br><span class="line">    if (!runtime)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mEngine = std::shared_ptr&lt;nvinfer1::ICudaEngine&gt;(</span><br><span class="line">        runtime-&gt;deserializeCudaEngine(plan-&gt;data(), plan-&gt;size()), samplesCommon::InferDeleter());</span><br><span class="line">    if (!mEngine)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ASSERT(network-&gt;getNbInputs() == 1);</span><br><span class="line">    mInputDims = network-&gt;getInput(0)-&gt;getDimensions();</span><br><span class="line">    ASSERT(mInputDims.nbDims == 4);</span><br><span class="line"></span><br><span class="line">    ASSERT(network-&gt;getNbOutputs() == 1);</span><br><span class="line">    mOutputDims = network-&gt;getOutput(0)-&gt;getDimensions();</span><br><span class="line">    ASSERT(mOutputDims.nbDims == 2);</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、infer"><a href="#3、infer" class="headerlink" title="3、infer()"></a>3、infer()</h2>这部分对应于之前介绍的Runtime阶段，主要任务是：<h3 id="1-创建-ExecutionContext"><a href="#1-创建-ExecutionContext" class="headerlink" title="(1)创建 ExecutionContext"></a>(1)创建 ExecutionContext</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto context = SampleUniquePtr&lt;nvinfer1::IExecutionContext&gt;(mEngine-&gt;createExecutionContext());</span><br><span class="line">if (!context)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置输入输出buffer"><a href="#2-配置输入输出buffer" class="headerlink" title="(2)配置输入输出buffer"></a>(2)配置输入输出buffer</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">samplesCommon::BufferManager buffers(mEngine);</span><br><span class="line">ASSERT(mParams.inputTensorNames.size() == 1);</span><br><span class="line">if (!processInput(buffers))</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>BufferManager类用来处理host于device上buffer的分配与释放，简化buffer管理及buffer与engine之间的交互。</li></ol><p>processInput(buffers)则用来读取输入，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bool SampleOnnxMNIST::processInput(const samplesCommon::BufferManager&amp; buffers)</span><br><span class="line">&#123;</span><br><span class="line">    // 获取尺寸</span><br><span class="line">    const int inputH = mInputDims.d[2];</span><br><span class="line">    const int inputW = mInputDims.d[3];</span><br><span class="line">    // 随机获取输入图片</span><br><span class="line">    srand(unsigned(time(nullptr)));</span><br><span class="line">    std::vector&lt;uint8_t&gt; fileData(inputH * inputW);</span><br><span class="line">    mNumber = rand() % 10;</span><br><span class="line">    readPGMFile(locateFile(std::to_string(mNumber) + &quot;.pgm&quot;, mParams.dataDirs), fileData.data(), inputH, inputW);</span><br><span class="line"></span><br><span class="line">    // 打印图片</span><br><span class="line">    sample::gLogInfo &lt;&lt; &quot;Input:&quot; &lt;&lt; std::endl;</span><br><span class="line">    for (int i = 0; i &lt; inputH * inputW; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sample::gLogInfo &lt;&lt; (&quot; .:-=+*#%@&quot;[fileData[i] / 26]) &lt;&lt; (((i + 1) % inputW) ? &quot;&quot; : &quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    sample::gLogInfo &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    // 读入输入数据，不采用float(fileData[i] / 255.0</span><br><span class="line">    // 而采用1.0 - float(fileData[i] / 255.0的原因未知</span><br><span class="line">    float* hostDataBuffer = static_cast&lt;float*&gt;(buffers.getHostBuffer(mParams.inputTensorNames[0]));</span><br><span class="line">    for (int i = 0; i &lt; inputH * inputW; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hostDataBuffer[i] = 1.0 - float(fileData[i] / 255.0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-执行推理"><a href="#3-执行推理" class="headerlink" title="(3)执行推理"></a>(3)执行推理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 将输入数据传到Device上</span><br><span class="line">buffers.copyInputToDevice();</span><br><span class="line">// 同步执行网络推理</span><br><span class="line">bool status = context-&gt;executeV2(buffers.getDeviceBindings().data());</span><br><span class="line">if (!status)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">// 将输出传回Host </span><br><span class="line">buffers.copyOutputToHost();</span><br></pre></td></tr></table></figure><p>executeV2的输入为指向输入与输出buffer的一组指针。</p><h3 id="总体代码："><a href="#总体代码：" class="headerlink" title="总体代码："></a>总体代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">bool SampleOnnxMNIST::infer()</span><br><span class="line">&#123;</span><br><span class="line">    // Create RAII buffer manager object</span><br><span class="line">    samplesCommon::BufferManager buffers(mEngine);</span><br><span class="line"></span><br><span class="line">    auto context = SampleUniquePtr&lt;nvinfer1::IExecutionContext&gt;(mEngine-&gt;createExecutionContext());</span><br><span class="line">    if (!context)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Read the input data into the managed buffers</span><br><span class="line">    ASSERT(mParams.inputTensorNames.size() == 1);</span><br><span class="line">    if (!processInput(buffers))</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Memcpy from host input buffers to device input buffers</span><br><span class="line">    buffers.copyInputToDevice();</span><br><span class="line"></span><br><span class="line">    bool status = context-&gt;executeV2(buffers.getDeviceBindings().data());</span><br><span class="line">    if (!status)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Memcpy from device output buffers to host output buffers</span><br><span class="line">    buffers.copyOutputToHost();</span><br><span class="line"></span><br><span class="line">    // Verify results</span><br><span class="line">    if (!verifyOutput(buffers))</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行结果："><a href="#执行结果：" class="headerlink" title="执行结果："></a>执行结果：</h2><p><img src="/source/_posts/TensorRT%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%80-%EF%BC%9A%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/ONNXMNIST%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一下学习TensorRT的过程，基本上是提炼翻译了一下手册。&lt;/p&gt;
&lt;h1 id=&quot;一、TensorRT-简介&quot;&gt;&lt;a href=&quot;#一、TensorRT-简介&quot; class=&quot;headerlink&quot; title=&quot;一、TensorRT 简介&quot;&gt;&lt;/a&gt;一、Tenso</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TensorRT学习记录(一)：简介与工作流程</title>
    <link href="http://example.com/2022/04/10/TensorRT%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2022/04/10/TensorRT%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2022-04-10T04:13:47.757Z</published>
    <updated>2022-04-10T04:32:44.548Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下学习TensorRT的过程，基本上是提炼翻译了一下手册。</p><h1 id="一、TensorRT-简介"><a href="#一、TensorRT-简介" class="headerlink" title="一、TensorRT 简介"></a>一、TensorRT 简介</h1><p>TensorRT是NVIDIA推出的一款高性能<strong>推理</strong>引擎，可与TensorFlow、Caffe等前端神经网络开发框架组合，加速网络在NVIDIA GPU上的推理速度。</p><h1 id="二、TensorRT-基本工作流程"><a href="#二、TensorRT-基本工作流程" class="headerlink" title="二、TensorRT 基本工作流程"></a>二、TensorRT 基本工作流程</h1><p>TensorRT的运行分为两个阶段：Build、Runtime。</p><h2 id="1、Build"><a href="#1、Build" class="headerlink" title="1、Build"></a>1、Build</h2><p>TensorRT针对目标GPU对网络模型做相应的优化处理，该阶段主要接口为 <em>Builder</em>，由 <em>Builder</em> 执行优化并生成 <em>Engine</em>。</p><p>生成<em>Engine</em>的步骤如下：</p><h3 id="1-创建网络定义"><a href="#1-创建网络定义" class="headerlink" title="(1)创建网络定义"></a>(1)创建网络定义</h3><p>由<em>NetworkDefinition</em> 负责，最常用的方式是在传入 TensorRT 前，先将前端网络模型转换为 ONNX 格式，然后使用 TensorRT 的 ONNX parser 将其传入。</p><h3 id="2-配置Builder"><a href="#2-配置Builder" class="headerlink" title="(2)配置Builder"></a>(2)配置<em>Builder</em></h3><p>由 <em>BuilderConfig</em> 负责，定义 <em>Builder</em> 如何优化网络模型。</p><h3 id="3-调用Builder生成Engine"><a href="#3-调用Builder生成Engine" class="headerlink" title="(3)调用Builder生成Engine"></a>(3)调用Builder生成<em>Engine</em></h3><p>完成网络定义与 <em>Builder</em> 配置后,即可调用 <em>Builder</em> 生成 <em>Engine</em>，<em>Builder</em>以序列化的方式创建 <em>Engine</em>（序列化后为Plan）， Plan可反序列化或保存至磁盘供后续使用。</p><p>P.S 序列化是将对象转换为可保持或可传输的格式的过程，与之相对的是反序列化。其将流还原为对象。</p><h2 id="2、Runtime"><a href="#2、Runtime" class="headerlink" title="2、Runtime"></a>2、Runtime</h2><p>该阶段执行优化后的神经网络模型，主要接口为<em>Runtime</em>，步骤如下：</p><h3 id="1-反序列化-Plan，创建-Engine"><a href="#1-反序列化-Plan，创建-Engine" class="headerlink" title="(1)反序列化 Plan，创建 Engine"></a>(1)反序列化 Plan，创建 <em>Engine</em></h3><p><em>Engine</em> 即为优化后的网络模型。</p><h3 id="2-创建ExecutionContext"><a href="#2-创建ExecutionContext" class="headerlink" title="(2)创建ExecutionContext"></a>(2)创建ExecutionContext</h3><p><em>ExecutionContext</em> 由 <em>Engine</em> 创建，是调用推理的主要接口。</p><h3 id="3-设置输入-输出-buffer"><a href="#3-设置输入-输出-buffer" class="headerlink" title="(3)设置输入/输出 buffer"></a>(3)设置输入/输出 buffer</h3><p>调用推理前必须设置输入输出buffer。</p><h3 id="4-执行推理"><a href="#4-执行推理" class="headerlink" title="(4)执行推理"></a>(4)执行推理</h3><p>以上准备就绪后，执行推理。</p><h1 id="三、SampleOnnxMNIST代码走读"><a href="#三、SampleOnnxMNIST代码走读" class="headerlink" title="三、SampleOnnxMNIST代码走读"></a>三、SampleOnnxMNIST代码走读</h1><p>这部分代码为官方实例代码，实现了加速 ONNX 格式的MNIST网络模型。</p><p>SampleOnnxMNIST类实现了网络模型的读取、优化及运行，接口如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class SampleOnnxMNIST</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    SampleOnnxMNIST(const samplesCommon::OnnxSampleParams&amp; params)</span><br><span class="line">        : mParams(params)</span><br><span class="line">        , mEngine(nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Function builds the network engine</span><br><span class="line">    //!</span><br><span class="line">    bool build();</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Runs the TensorRT inference engine for this sample</span><br><span class="line">    //!</span><br><span class="line">    bool infer();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    samplesCommon::OnnxSampleParams mParams; //!&lt; The parameters for the sample.</span><br><span class="line"></span><br><span class="line">    nvinfer1::Dims mInputDims;  //!&lt; The dimensions of the input to the network.</span><br><span class="line">    nvinfer1::Dims mOutputDims; //!&lt; The dimensions of the output to the network.</span><br><span class="line">    int mNumber&#123;0&#125;;             //!&lt; The number to classify</span><br><span class="line"></span><br><span class="line">    std::shared_ptr&lt;nvinfer1::ICudaEngine&gt; mEngine; //!&lt; The TensorRT engine used to run the network</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Parses an ONNX model for MNIST and creates a TensorRT network</span><br><span class="line">    //!</span><br><span class="line">    bool constructNetwork(SampleUniquePtr&lt;nvinfer1::IBuilder&gt;&amp; builder,</span><br><span class="line">        SampleUniquePtr&lt;nvinfer1::INetworkDefinition&gt;&amp; network, SampleUniquePtr&lt;nvinfer1::IBuilderConfig&gt;&amp; config,</span><br><span class="line">        SampleUniquePtr&lt;nvonnxparser::IParser&gt;&amp; parser);</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Reads the input  and stores the result in a managed buffer</span><br><span class="line">    //!</span><br><span class="line">    bool processInput(const samplesCommon::BufferManager&amp; buffers);</span><br><span class="line"></span><br><span class="line">    //!</span><br><span class="line">    //! \brief Classifies digits and verify result</span><br><span class="line">    //!</span><br><span class="line">    bool verifyOutput(const samplesCommon::BufferManager&amp; buffers);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1、OnnxSampleParams"><a href="#1、OnnxSampleParams" class="headerlink" title="1、OnnxSampleParams"></a>1、OnnxSampleParams</h2><p>OnnxSampleParams为一个结构体继承了SampleParams，保存了输入、输出、<em>builder</em>的优化配置等信息，结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct SampleParams</span><br><span class="line">&#123;</span><br><span class="line">    int32_t batchSize&#123;1&#125;;              //!&lt; Number of inputs in a batch</span><br><span class="line">    int32_t dlaCore&#123;-1&#125;;               //!&lt; Specify the DLA core to run network on.</span><br><span class="line">    bool int8&#123;false&#125;;                  //!&lt; Allow runnning the network in Int8 mode.</span><br><span class="line">    bool fp16&#123;false&#125;;                  //!&lt; Allow running the network in FP16 mode.</span><br><span class="line">    std::vector&lt;std::string&gt; dataDirs; //!&lt; Directory paths where sample data files are stored</span><br><span class="line">    std::vector&lt;std::string&gt; inputTensorNames;</span><br><span class="line">    std::vector&lt;std::string&gt; outputTensorNames;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct OnnxSampleParams : public SampleParams</span><br><span class="line">&#123;</span><br><span class="line">    std::string onnxFileName; //!&lt; Filename of ONNX file of a network</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2、build"><a href="#2、build" class="headerlink" title="2、build()"></a>2、build()</h2><h3 id="1-创建builder"><a href="#1-创建builder" class="headerlink" title="(1)创建builder"></a>(1)创建<em>builder</em></h3><p>创建 <em>builder</em> 的代码如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto builder = SampleUniquePtr&lt;nvinfer1::IBuilder&gt;(nvinfer1::createInferBuilder(sample::gLogger.getTRTLogger()));</span><br><span class="line">    if (!builder)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>SampleUniquePtr为TensorRT包装的unique类型智能指针，其定义如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt;</span><br><span class="line">using SampleUniquePtr = std::unique_ptr&lt;T, InferDeleter&gt;;</span><br></pre></td></tr></table></figure><p>createInferBuilder函数，返回IBuilder类型指针：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inline IBuilder* createInferBuilder(ILogger&amp; logger) noexcept</span><br><span class="line">&#123;</span><br><span class="line">    return static_cast&lt;IBuilder*&gt;(createInferBuilder_INTERNAL(&amp;logger, NV_TENSORRT_VERSION));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数的输入参数ILogger为日志接口，用于记录运行时的相关信息(?)，这部分以后再看看吧</p><h3 id="2-创建网络定义"><a href="#2-创建网络定义" class="headerlink" title="(2)创建网络定义"></a>(2)创建网络定义</h3><p>通过<em>Builder</em>的createNetworkV2函数返回网络定义对象，该函数的输入参数定义了网络对象的一些属性，explicitBatch表示该网络为显式固定batch，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const auto explicitBatch = 1U &lt;&lt; static_cast&lt;uint32_t&gt;(NetworkDefinitionCreationFlag::kEXPLICIT_BATCH);</span><br><span class="line">auto network = SampleUniquePtr&lt;nvinfer1::INetworkDefinition&gt;(builder-&gt;createNetworkV2(explicitBatch));</span><br><span class="line">if (!network)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建Builder配置"><a href="#3-创建Builder配置" class="headerlink" title="(3)创建Builder配置"></a>(3)创建<em>Builder</em>配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto config = SampleUniquePtr&lt;nvinfer1::IBuilderConfig&gt;(builder-&gt;createBuilderConfig());</span><br><span class="line">if (!config)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建-ONNX-Parser"><a href="#4-创建-ONNX-Parser" class="headerlink" title="(4)创建 ONNX Parser"></a>(4)创建 ONNX Parser</h3><p>由于模型为 ONNX 格式，因此需要用 TensorRT 的ONNX Parser来解析并将其读入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auto parser</span><br><span class="line">    = SampleUniquePtr&lt;nvonnxparser::IParser&gt;(nvonnxparser::createParser(*network, sample::gLogger.getTRTLogger()));</span><br><span class="line">if (!parser)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中函数createParser将返回一个parser对象，解析的结果将写入之前定义的network中。</p><h3 id="5-构建网络"><a href="#5-构建网络" class="headerlink" title="(5)构建网络"></a>(5)构建网络</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto constructed = constructNetwork(builder, network, config, parser);</span><br><span class="line">if (!constructed)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用constructNetwork函数完成网络的构建，在函数内调用之前创建的ONNX解析器对解析ONNX文件，并完成对<em>builder</em>的配置，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bool SampleOnnxMNIST::constructNetwork(SampleUniquePtr&lt;nvinfer1::IBuilder&gt;&amp; builder,</span><br><span class="line">    SampleUniquePtr&lt;nvinfer1::INetworkDefinition&gt;&amp; network, SampleUniquePtr&lt;nvinfer1::IBuilderConfig&gt;&amp; config,</span><br><span class="line">    SampleUniquePtr&lt;nvonnxparser::IParser&gt;&amp; parser)</span><br><span class="line">&#123;</span><br><span class="line">    // 解析 ONNX 文件，获得网络模型</span><br><span class="line">    auto parsed = parser-&gt;parseFromFile(locateFile(mParams.onnxFileName, mParams.dataDirs).c_str(),</span><br><span class="line">        static_cast&lt;int&gt;(sample::gLogger.getReportableSeverity()));</span><br><span class="line">    if (!parsed)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    // 设置TensorRT 工作空间大小，越大可采用的优化算法越多</span><br><span class="line">    // 示例中设为16MB</span><br><span class="line">    config-&gt;setMaxWorkspaceSize(16_MiB);</span><br><span class="line">    // 配置参数是否为FP16，INT8类型</span><br><span class="line">    if (mParams.fp16)</span><br><span class="line">    &#123;</span><br><span class="line">        config-&gt;setFlag(BuilderFlag::kFP16);</span><br><span class="line">    &#125;</span><br><span class="line">    if (mParams.int8)</span><br><span class="line">    &#123;</span><br><span class="line">        config-&gt;setFlag(BuilderFlag::kINT8);</span><br><span class="line">        samplesCommon::setAllDynamicRanges(network.get(), 127.0f, 127.0f);</span><br><span class="line">    &#125;</span><br><span class="line">    // 目标硬件是否DLA</span><br><span class="line">    samplesCommon::enableDLA(builder.get(), config.get(), mParams.dlaCore);</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>P.S. DLA(Deep Learning Accelerator)是NVIDIA开源的深度学习加速器。</p><h3 id="6-配置-CUDA-流"><a href="#6-配置-CUDA-流" class="headerlink" title="(6)配置 CUDA 流"></a>(6)配置 CUDA 流</h3><p>为config配置用于执行该网络的CUDA流：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auto profileStream = samplesCommon::makeCudaStream();</span><br><span class="line">if (!profileStream)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">config-&gt;setProfileStream(*profileStream);</span><br></pre></td></tr></table></figure><h3 id="7-生成-Engine"><a href="#7-生成-Engine" class="headerlink" title="(7)生成 Engine"></a>(7)生成 <em>Engine</em></h3><ol><li>根据网络定义与builder配置编译优化网络，并将其序列化得到plan</li><li>创建runtime准备反序列化</li><li>反序列化plan获得Engine<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 根据之前的网络定义与builder配置编译优化并序列化网络</span><br><span class="line">SampleUniquePtr&lt;IHostMemory&gt; plan&#123;builder-&gt;buildSerializedNetwork(*network, *config)&#125;;</span><br><span class="line">if (!plan)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">// 创建runtime准备反序列化</span><br><span class="line">SampleUniquePtr&lt;IRuntime&gt; runtime&#123;createInferRuntime(sample::gLogger.getTRTLogger())&#125;;</span><br><span class="line">if (!runtime)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">// 反序列化plan获得Engine</span><br><span class="line">mEngine = std::shared_ptr&lt;nvinfer1::ICudaEngine&gt;(</span><br><span class="line">    runtime-&gt;deserializeCudaEngine(plan-&gt;data(), plan-&gt;size()), samplesCommon::InferDeleter());</span><br><span class="line">if (!mEngine)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">bool SampleOnnxMNIST::build()</span><br><span class="line">&#123;</span><br><span class="line">    auto builder = SampleUniquePtr&lt;nvinfer1::IBuilder&gt;(nvinfer1::createInferBuilder(sample::gLogger.getTRTLogger()));</span><br><span class="line">    if (!builder)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const auto explicitBatch = 1U &lt;&lt; static_cast&lt;uint32_t&gt;(NetworkDefinitionCreationFlag::kEXPLICIT_BATCH);</span><br><span class="line">    auto network = SampleUniquePtr&lt;nvinfer1::INetworkDefinition&gt;(builder-&gt;createNetworkV2(explicitBatch));</span><br><span class="line">    if (!network)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto config = SampleUniquePtr&lt;nvinfer1::IBuilderConfig&gt;(builder-&gt;createBuilderConfig());</span><br><span class="line">    if (!config)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto parser</span><br><span class="line">        = SampleUniquePtr&lt;nvonnxparser::IParser&gt;(nvonnxparser::createParser(*network, sample::gLogger.getTRTLogger()));</span><br><span class="line">    if (!parser)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto constructed = constructNetwork(builder, network, config, parser);</span><br><span class="line">    if (!constructed)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto profileStream = samplesCommon::makeCudaStream();</span><br><span class="line">    if (!profileStream)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    config-&gt;setProfileStream(*profileStream);</span><br><span class="line"></span><br><span class="line">    SampleUniquePtr&lt;IHostMemory&gt; plan&#123;builder-&gt;buildSerializedNetwork(*network, *config)&#125;;</span><br><span class="line">    if (!plan)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SampleUniquePtr&lt;IRuntime&gt; runtime&#123;createInferRuntime(sample::gLogger.getTRTLogger())&#125;;</span><br><span class="line">    if (!runtime)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mEngine = std::shared_ptr&lt;nvinfer1::ICudaEngine&gt;(</span><br><span class="line">        runtime-&gt;deserializeCudaEngine(plan-&gt;data(), plan-&gt;size()), samplesCommon::InferDeleter());</span><br><span class="line">    if (!mEngine)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ASSERT(network-&gt;getNbInputs() == 1);</span><br><span class="line">    mInputDims = network-&gt;getInput(0)-&gt;getDimensions();</span><br><span class="line">    ASSERT(mInputDims.nbDims == 4);</span><br><span class="line"></span><br><span class="line">    ASSERT(network-&gt;getNbOutputs() == 1);</span><br><span class="line">    mOutputDims = network-&gt;getOutput(0)-&gt;getDimensions();</span><br><span class="line">    ASSERT(mOutputDims.nbDims == 2);</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、infer"><a href="#3、infer" class="headerlink" title="3、infer()"></a>3、infer()</h2>这部分对应于之前介绍的Runtime阶段，主要任务是：<h3 id="1-创建-ExecutionContext"><a href="#1-创建-ExecutionContext" class="headerlink" title="(1)创建 ExecutionContext"></a>(1)创建 ExecutionContext</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto context = SampleUniquePtr&lt;nvinfer1::IExecutionContext&gt;(mEngine-&gt;createExecutionContext());</span><br><span class="line">if (!context)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置输入输出buffer"><a href="#2-配置输入输出buffer" class="headerlink" title="(2)配置输入输出buffer"></a>(2)配置输入输出buffer</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">samplesCommon::BufferManager buffers(mEngine);</span><br><span class="line">ASSERT(mParams.inputTensorNames.size() == 1);</span><br><span class="line">if (!processInput(buffers))</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>BufferManager类用来处理host于device上buffer的分配与释放，简化buffer管理及buffer与engine之间的交互。</li></ol><p>processInput(buffers)则用来读取输入，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bool SampleOnnxMNIST::processInput(const samplesCommon::BufferManager&amp; buffers)</span><br><span class="line">&#123;</span><br><span class="line">    // 获取尺寸</span><br><span class="line">    const int inputH = mInputDims.d[2];</span><br><span class="line">    const int inputW = mInputDims.d[3];</span><br><span class="line">    // 随机获取输入图片</span><br><span class="line">    srand(unsigned(time(nullptr)));</span><br><span class="line">    std::vector&lt;uint8_t&gt; fileData(inputH * inputW);</span><br><span class="line">    mNumber = rand() % 10;</span><br><span class="line">    readPGMFile(locateFile(std::to_string(mNumber) + &quot;.pgm&quot;, mParams.dataDirs), fileData.data(), inputH, inputW);</span><br><span class="line"></span><br><span class="line">    // 打印图片</span><br><span class="line">    sample::gLogInfo &lt;&lt; &quot;Input:&quot; &lt;&lt; std::endl;</span><br><span class="line">    for (int i = 0; i &lt; inputH * inputW; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sample::gLogInfo &lt;&lt; (&quot; .:-=+*#%@&quot;[fileData[i] / 26]) &lt;&lt; (((i + 1) % inputW) ? &quot;&quot; : &quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    sample::gLogInfo &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    // 读入输入数据，不采用float(fileData[i] / 255.0</span><br><span class="line">    // 而采用1.0 - float(fileData[i] / 255.0的原因未知</span><br><span class="line">    float* hostDataBuffer = static_cast&lt;float*&gt;(buffers.getHostBuffer(mParams.inputTensorNames[0]));</span><br><span class="line">    for (int i = 0; i &lt; inputH * inputW; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hostDataBuffer[i] = 1.0 - float(fileData[i] / 255.0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-执行推理"><a href="#3-执行推理" class="headerlink" title="(3)执行推理"></a>(3)执行推理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 将输入数据传到Device上</span><br><span class="line">buffers.copyInputToDevice();</span><br><span class="line">// 同步执行网络推理</span><br><span class="line">bool status = context-&gt;executeV2(buffers.getDeviceBindings().data());</span><br><span class="line">if (!status)</span><br><span class="line">&#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">// 将输出传回Host </span><br><span class="line">buffers.copyOutputToHost();</span><br></pre></td></tr></table></figure><p>executeV2的输入为指向输入与输出buffer的一组指针。</p><h3 id="总体代码："><a href="#总体代码：" class="headerlink" title="总体代码："></a>总体代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">bool SampleOnnxMNIST::infer()</span><br><span class="line">&#123;</span><br><span class="line">    // Create RAII buffer manager object</span><br><span class="line">    samplesCommon::BufferManager buffers(mEngine);</span><br><span class="line"></span><br><span class="line">    auto context = SampleUniquePtr&lt;nvinfer1::IExecutionContext&gt;(mEngine-&gt;createExecutionContext());</span><br><span class="line">    if (!context)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Read the input data into the managed buffers</span><br><span class="line">    ASSERT(mParams.inputTensorNames.size() == 1);</span><br><span class="line">    if (!processInput(buffers))</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Memcpy from host input buffers to device input buffers</span><br><span class="line">    buffers.copyInputToDevice();</span><br><span class="line"></span><br><span class="line">    bool status = context-&gt;executeV2(buffers.getDeviceBindings().data());</span><br><span class="line">    if (!status)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Memcpy from device output buffers to host output buffers</span><br><span class="line">    buffers.copyOutputToHost();</span><br><span class="line"></span><br><span class="line">    // Verify results</span><br><span class="line">    if (!verifyOutput(buffers))</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行结果："><a href="#执行结果：" class="headerlink" title="执行结果："></a>执行结果：</h2><p><img src="../images/ONNXMNIST%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一下学习TensorRT的过程，基本上是提炼翻译了一下手册。&lt;/p&gt;
&lt;h1 id=&quot;一、TensorRT-简介&quot;&gt;&lt;a href=&quot;#一、TensorRT-简介&quot; class=&quot;headerlink&quot; title=&quot;一、TensorRT 简介&quot;&gt;&lt;/a&gt;一、Tenso</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://example.com/2021/09/28/test/"/>
    <id>http://example.com/2021/09/28/test/</id>
    <published>2021-09-28T13:45:49.000Z</published>
    <updated>2021-09-28T13:46:27.346Z</updated>
    
    <content type="html"><![CDATA[<p>#这下真的有点麻了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#这下真的有点麻了&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/09/28/hello-world/"/>
    <id>http://example.com/2021/09/28/hello-world/</id>
    <published>2021-09-28T11:32:24.354Z</published>
    <updated>2021-09-28T11:32:24.354Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
